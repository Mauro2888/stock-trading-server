name: Export Database Schema (Generic)
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  export:
    runs-on: ubuntu-22.04
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres  # Always start with default postgres db
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Load Environment Variables
        uses: xom9ikk/dotenv@v2.3.0
        with:
          path: ./.github/workflows/common-env
          load-mode: strict
          
      - name: Setup JDK (for Liquibase)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Debug Liquibase configuration
        run: |
          echo "🔍 Debugging Liquibase setup differences..."
          echo "📁 Current directory: $(pwd)"
          echo ""
          echo "📂 Exact file structure:"
          find src/main/resources/db -type f -exec ls -la {} \;
          echo ""
          echo "📋 Master changelog content:"
          cat src/main/resources/db/db-changelog-master.yml
          echo ""
          echo "📁 Changelog directory exact contents:"
          ls -la src/main/resources/db/changelog/
          echo ""
          echo "🔧 Maven Liquibase plugin version:"
          mvn help:describe -Dplugin=org.liquibase:liquibase-maven-plugin -Ddetail=true | grep -A5 -B5 "Version"
          echo ""
          echo "📦 Spring Boot Liquibase dependency:"
          mvn dependency:tree | grep -i liquibase
          echo ""
          echo "☕ Java versions:"
          echo "Maven Java: $(mvn -version | grep 'Java version')"
          echo "Runtime Java: $(java -version 2>&1 | head -1)"
          echo ""
          echo "🔧 Maven effective settings:"
          mvn help:effective-settings | grep -A10 -B10 liquibase || echo "No liquibase settings found"
      - name: Setup target database
        run: |
          echo "🔧 Debug PostgreSQL connection..."
          echo "User: $(whoami)"
          echo "PostgreSQL process:"
          ps aux | grep postgres || echo "No postgres process found"
          
          echo "⏳ Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 2
          done
          
          echo "📋 Testing basic connection..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT current_user, current_database();"
          
          echo "🗄️ Creating export database..."
          PGPASSWORD=postgres createdb -h localhost -U postgres export_db
          
          echo "🔌 Testing new database connection..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d export_db -c "SELECT version();"
          
          echo "📊 Listing databases..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "\l"

      - name: Try different Liquibase approach
        run: |
          echo "🔄 Testing different Liquibase approaches..."
          
          # Approach 1: Try with explicit driver
          echo "📋 Approach 1: Maven plugin with explicit driver"
          if mvn liquibase:update \
            -Dliquibase.changeLogFile="src/main/resources/db/db-changelog-master.yml" \
            -Dliquibase.url="jdbc:postgresql://localhost:5432/export_db" \
            -Dliquibase.username="postgres" \
            -Dliquibase.password="postgres" \
            -Dliquibase.driver="org.postgresql.Driver" \
            -Dliquibase.verbose=true; then
            echo "✅ Approach 1 succeeded!"
          else
            echo "❌ Approach 1 failed, trying fallback..."
            
            # Fallback: Create YAML wrappers for SQL files
            echo "🔧 Creating Liquibase YAML wrappers..."
            for sql_file in src/main/resources/db/changelog/*.sql; do
              if [ -f "$sql_file" ]; then
                base_name=$(basename "$sql_file" .sql)
                yaml_file="src/main/resources/db/changelog/${base_name}.yml"
                
                echo "📝 Creating: $yaml_file"
                cat > "$yaml_file" << EOF
databaseChangeLog:
  - changeSet:
      id: ${base_name}
      author: github-action
      changes:
        - sqlFile:
            path: ${base_name}.sql
            relativeToChangelogFile: true
EOF
              fi
            done
            
            echo "📋 Retrying with YAML wrappers..."
            mvn liquibase:update \
              -Dliquibase.changeLogFile="src/main/resources/db/db-changelog-master.yml" \
              -Dliquibase.url="jdbc:postgresql://localhost:5432/export_db" \
              -Dliquibase.username="postgres" \
              -Dliquibase.password="postgres" \
              -Dliquibase.driver="org.postgresql.Driver" \
              -Dliquibase.verbose=true
          fi
          
          echo ""
          echo "📋 Checking if tables were created..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d export_db -c "\dt" || echo "No tables found"

      - name: Export schema
        run: |
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          OUTPUT="database-schema-${TIMESTAMP}.sql"

          mkdir -p exports

          # Export schema
          PGPASSWORD=postgres pg_dump -h localhost -U postgres -d export_db \
            --schema-only --no-comments \
            --exclude-table=databasechangelog --exclude-table=databasechangeloglock | \
            sed '/^SET /d; /^SELECT /d; /^--/d; /^$/d; /^ALTER TABLE.*OWNER/d' | \
            awk '/^CREATE TABLE/,/^);/ {print} /^ALTER TABLE.*ADD CONSTRAINT/ {print} /^CREATE.*INDEX/ {print}' > "$OUTPUT"

          # Export data
          echo -e "\n-- DATA" >> "$OUTPUT"
          PGPASSWORD=postgres pg_dump -h localhost -U postgres -d export_db \
            --data-only --exclude-table=databasechangelog --exclude-table=databasechangeloglock \
            --column-inserts | grep "^INSERT" >> "$OUTPUT"

          mv "$OUTPUT" exports/

      - name: Commit and upload
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add exports/
          git commit -m "Database export $(date)" || true
          git push || true

      - uses: actions/upload-artifact@v4
        with:
          name: database-schema-${{ github.run_number }}
          path: exports/*.sql
